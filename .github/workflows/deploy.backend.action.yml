#
name: deploy to azure container regsitry


on:
  workflow_dispatch:

env:
  REGISTRY: azurecr.io
  IMAGE_NAME: ${{ github.repository }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  ACR_NAME: ${{ secrets.ACR_NAME }}
  REGISTRY_USER: ${{ secrets.ACR_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
  DB_SSL_MODE: ${{ secrets.DB_SSL_MODE }}
  CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ env.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_DB: personal-plug-db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 8100:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn clean install -P prod
        env:
          SECRET_KEY: ${{ env.SECRET_KEY }}
          KEY_STORE_PASSWORD: ${{ env.KEY_STORE_PASSWORD }}
          DB_USERNAME: ${{ env.DB_USERNAME }}
          DB_PASSWORD: ${{ env.DB_PASSWORD }}
          DB_CONNECTION_STRING: ${{ env.DB_CONNECTION_STRING }}
          CORS_ALLOWED_ORIGINS: ${{ env.CORS_ALLOWED_ORIGINS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{env.ACR_NAME}}.${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{env.ACR_NAME}}.${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

