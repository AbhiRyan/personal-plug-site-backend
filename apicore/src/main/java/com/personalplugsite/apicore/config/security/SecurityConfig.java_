package com.personalplugsite.apicore.config.security;

import static java.lang.String.format;

import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.text.MessageFormat;
import java.util.List;
import java.util.concurrent.ExecutionException;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import com.azure.identity.ClientSecretCredential;
import com.azure.identity.ClientSecretCredentialBuilder;
import com.dxc.digital.fingerprint.service.UserServiceImpl;
import com.microsoft.graph.authentication.TokenCredentialAuthProvider;
import com.microsoft.graph.logger.DefaultLogger;
import com.microsoft.graph.logger.LoggerLevel;
import com.microsoft.graph.requests.GraphServiceClient;
import com.microsoft.graph.requests.UserRequestBuilder;

import lombok.NonNull;

@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

	private final JwtTokenFilter jwtTokenFilter;
	private final UserServiceImpl userService;

	public SecurityConfig(JwtTokenFilter jwtTokenFilter, UserServiceImpl userServiceImpl) {
		this.jwtTokenFilter = jwtTokenFilter;
		this.userService = userServiceImpl;
	}

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		try {
			auth.userDetailsService(this.userService);
		} catch (ExecutionException ex) {
			throw new UsernameNotFoundException(format("User %s, not found", auth));
		}
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		http = http.cors().and().csrf().disable();
		http = http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and();

		http = http.exceptionHandling().authenticationEntryPoint((request, response, ex) -> {
			response.sendError(HttpServletResponse.SC_UNAUTHORIZED, ex.getMessage());
		}).and();

		http.authorizeRequests()
				// Public endpoints
				.antMatchers(HttpMethod.OPTIONS, "/**").permitAll()
				.antMatchers(HttpMethod.POST, "/api/employees/login").permitAll()
				.antMatchers(HttpMethod.POST, "/api/employees/refreshToken").permitAll()
				// .antMatchers(Swagger_Whitelist).permitAll()
				// Private endpoints
				.anyRequest().authenticated();

		// Add JWT token filter
		http.addFilterBefore(jwtTokenFilter, UsernamePasswordAuthenticationFilter.class);
	}

	// Used by spring security if CORS is enabled.
	@Bean
	public CorsFilter corsFilter() throws MalformedURLException, URISyntaxException {
		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();

		final String dfpAllowedMicrosoftGraphUrl = MessageFormat.format(
				"https://{0}", new URL(this.dfpAppGraphScope).toURI().getHost());

		CorsConfiguration config = new CorsConfiguration();
		config.setAllowCredentials(true);
		config.addAllowedOrigin(dfpAllowedOrigin);
		config.addAllowedOrigin(this.microsoftGraphUrl);
		config.addAllowedOrigin(dfpAllowedMicrosoftGraphUrl);
		config.addAllowedHeader("*");
		config.addAllowedMethod("*");
		config.addExposedHeader("Authorization");
		source.registerCorsConfiguration("/**", config);
		return new CorsFilter(source);
	}

	@Override
	@Bean
	public AuthenticationManager authenticationManagerBean() throws Exception {
		return super.authenticationManagerBean();
	}

	@Bean
	public UserRequestBuilder createGraphClientBean() {
		ClientSecretCredential graphCredentials = new ClientSecretCredentialBuilder()
				.tenantId(this.dfpTenantId)
				.clientId(this.dfpAppClientId)
				.clientSecret(this.dfpAppSecrets)
				.build();

		@NonNull
		final List<String> graphDefaultScope = List.of(this.dfpAppGraphScope);
		final TokenCredentialAuthProvider tokenCredAuthProvider = new TokenCredentialAuthProvider(
				graphDefaultScope, graphCredentials);

		DefaultLogger logger = new DefaultLogger();
		logger.setLoggingLevel(LoggerLevel.ERROR);

		return GraphServiceClient
				.builder()
				.authenticationProvider(tokenCredAuthProvider)
				.logger(logger)
				.buildClient()
				.users(this.dfpMailboxId);
	}
}
